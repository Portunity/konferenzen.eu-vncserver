cmake_minimum_required (VERSION 2.6)

project (konferenzen.eu-vncserver)
set( CMAKE_VERBOSE_MAKEFILE on )
# Magie um Ressourcen in die fertige EXE zu packen
set(RES_FILES "resources.rc")
set(CMAKE_RC_COMPILER_INIT windres)
ENABLE_LANGUAGE(RC)
SET(CMAKE_RC_COMPILE_OBJECT "<CMAKE_RC_COMPILER> -O coff <DEFINES> -i <SOURCE> -o <OBJECT> ${CMAKE_RC_FLAGS}")

find_library (SHLWAPI_LIBRARY libshlwapi.a)
find_library (WS2_32_LIBRARY libws2_32.a)
find_library (GDIPLUS_LIBRARY libgdiplus.a)
set(WIN_LIBS ${SHLWAPI_LIBRARY} ${WS2_32_LIBRARY} ${GDIPLUS_LIBRARY})

find_package(PkgConfig)
if (PKG_CONFIG_FOUND)
	message("found pkg-config")
	pkg_check_modules(GNUTLS gnutlsxx)
	option(WITHOUT_GNUTLS "Disable GnuTLS" OFF)
	if (NOT WITHOUT_GNUTLS AND GNUTLS_FOUND) 
		message("with gnutls")
		add_definitions(-DHAS_GNUTLS) #reaktivieren wenn umgeschrieben ohne cpp wrapper
		link_directories(${GNUTLS_STATIC_LIBRARY_DIRS})
		message(${GNUTLS_STATIC_LIBRARIES})
		set(ADDITIONAL_LIBS ${ADDITIONAL_LIBS} ${GNUTLS_STATIC_LIBRARIES} crypt32)
		set(ADDITIONAL_INCLUDES ${ADDITIONAL_INCLUDES} ${GNUTLS_STATIC_INCLUDE_DIRS})
	endif()
endif()

#find_library (GNUTLS_LIBRARY libgnutls.a)
#find_library (GNUTLSXX_LIBRARY libgnutlsxx.a)
#if (GNUTLS_LIBRARY AND GNUTLSXX_LIBRARY)
#	find_library(NETTLE_LIBRARY libnettle.a)
#	find_library(HOGWEED_LIBRARY libhogweed.a)
#	find_library(GMP_LIBRARY libgmp.a)
#	if (NETTLE_LIBRARY AND HOGWEED_LIBRARY AND GMP_LIBRARY)
#		add_definitions(-DHAS_GNUTLS)
#		set(GNUTLS_LIBRARY ${GNUTLSXX_LIBRARY} ${GNUTLS_LIBRARY} ${HOGWEED_LIBRARY} ${NETTLE_LIBRARY} ${GMP_LIBRARY})
#		set(GNUTLS_INCLUDE_DIR ${GNUTLS_INCLUDE_DIR} ${GNUTLSXX_INCLUDE_DIR} ${HOGWEED_INCLUDE_DIR} ${NETTLE_INCLUDE_DIR} ${GMP_INCLUDE_DIR})
#
#		message("with gnutls")
#		message(${GNUTLS_LIBRARY})
#		set(ADDITIONAL_LIBS ${ADDITIONAL_LIBS} ${GNUTLS_LIBRARY} z intl ws2_32 iconv ws2_32 gmp)
#		set(ADDITIONAL_INCLUDES ${ADDITIONAL_INCLUDES} ${GNUTLS_INCLUDE_DIR})
#	endif()
#endif()

include_directories(${LIBVNCSERVER_INCLUDE_DIR} ${CMAKE_BINARY_DIR} ${ADDITIONAL_INCLUDES})
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x -mwindows -static-libgcc -static-libstdc++")

add_executable(konferenzen.eu-vncserver WIN32 main.cpp PresentationServer.cpp ScreenCapture.cpp ${RES_FILES})
message(konferenzen.eu-vncserver ${LIBVNCSERVER_LIBRARY} ${ZLIB_LIBRARY} ${JPEG_LIBRARY} ${PNG_LIBRARY} ${WIN_LIBS} ${ADDITIONAL_LIBS})
target_link_libraries (konferenzen.eu-vncserver ${LIBVNCSERVER_LIBRARY} ${ZLIB_LIBRARY} ${JPEG_LIBRARY} ${PNG_LIBRARY} ${WIN_LIBS} ${ADDITIONAL_LIBS})

